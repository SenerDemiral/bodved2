// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/CRUD.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RestLib {

  /// <summary>Holder for reflection information generated from protos/CRUD.proto</summary>
  public static partial class CRUDReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/CRUD.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CRUDReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFwcm90b3MvQ1JVRC5wcm90bxIHUmVzdExpYiIoCghRcnlQcm94eRINCgVx",
            "dWVyeRgBIAEoCRINCgVwYXJhbRgCIAEoCSIxChFSZWZyZXNoU29udWNQcm94",
            "eRINCgVxdWVyeRgBIAEoCRINCgVwYXJhbRgCIAEoCSJUCg1QUGxvb2tVcFBy",
            "b3h5Eg4KBlJvd0tleRgBIAEoBBIKCgJBZBgCIAEoCRILCgNTZXgYAyABKAkS",
            "CwoDQ1RzGAUgASgJEg0KBUlzUnVuGAYgASgIItgCCgdQUFByb3h5Eg4KBlJv",
            "d1N0ZRgBIAEoCRIOCgZSb3dFcnIYAiABKAkSDgoGUm93VXNyGAMgASgEEg4K",
            "BlJvd0tleRgEIAEoBBIKCgJBZBgFIAEoCRIMCgRJbmZvGAYgASgJEgsKA1Nl",
            "eBgHIAEoCRILCgNUZWwYCCABKAkSDQoFSXNSdW4YCSABKAgSDgoGUm5rQmF6",
            "GAogASgFEg4KBlJua1NvbhgLIAEoBRIOCgZSbmtJZHgYDCABKAUSCwoDU1NU",
            "GA0gASgFEgsKA1NTVxgOIAEoBRILCgNTU0wYDyABKAUSCwoDU01UGBAgASgF",
            "EgsKA1NNVxgRIAEoBRILCgNTTUwYEiABKAUSCwoDRFNUGBMgASgFEgsKA0RT",
            "VxgUIAEoBRILCgNEU0wYFSABKAUSCwoDRE1UGBYgASgFEgsKA0RNVxgXIAEo",
            "BRILCgNETUwYGCABKAUiqAIKB0NDUHJveHkSDgoGUm93U3RlGAEgASgJEg4K",
            "BlJvd0VychgCIAEoCRIOCgZSb3dVc3IYAyABKAQSDgoGUm93S2V5GAQgASgE",
            "EgoKAkFkGAUgASgJEgsKA1NrbBgGIAEoCRILCgNHcnAYByABKAkSDAoESW5m",
            "bxgIIAEoCRINCgVJc1J1bhgJIAEoCBIOCgZJc1Jua2QYCiABKAgSDAoEVE5T",
            "TRgLIAEoBRIMCgRUTkRNGAwgASgFEgwKBFROU1MYDSABKAUSDAoEVE5EUxgO",
            "IAEoBRIMCgRUU01LGA8gASgFEgwKBFRETUsYECABKAUSDAoEVEVHUBgRIAEo",
            "BRIMCgRURU1QGBIgASgFEgwKBFRFQlAYEyABKAUSDAoEVEVYUBgUIAEoBSK5",
            "AgoHQ1RQcm94eRIOCgZSb3dTdGUYASABKAkSDgoGUm93RXJyGAIgASgJEg4K",
            "BlJvd1VzchgDIAEoBBIOCgZSb3dLZXkYBCABKAQSCgoCQ0MYBSABKAQSCgoC",
            "SzEYBiABKAQSCgoCSzIYByABKAQSCgoCQWQYCCABKAkSDAoESW5mbxgJIAEo",
            "CRINCgVBZHJlcxgKIAEoCRINCgVJc1J1bhgLIAEoCBILCgNTTVcYDCABKAUS",
            "CwoDU01MGA0gASgFEgsKA0RNVxgOIAEoBRILCgNETUwYDyABKAUSCgoCS1cY",
            "ECABKAUSCgoCS0wYESABKAUSCgoCS0YYEiABKAUSCgoCRVcYEyABKAUSCgoC",
            "RUwYFCABKAUSCgoCRUIYFSABKAUSCgoCRVgYFiABKAUSCgoCUFcYFyABKAUi",
            "uAEKCENUUFByb3h5Eg4KBlJvd1N0ZRgBIAEoCRIOCgZSb3dFcnIYAiABKAkS",
            "DgoGUm93VXNyGAMgASgEEg4KBlJvd0tleRgEIAEoBBIKCgJDQxgFIAEoBBIK",
            "CgJDVBgGIAEoBBIKCgJQUBgHIAEoBBILCgNJZHgYCCABKAUSDQoFSXNSdW4Y",
            "CSABKAgSDgoGUm5rQmFzGAogASgFEg4KBlJua0JpdBgLIAEoBRIMCgRJbmZv",
            "GAwgASgJIqUBCghDRVRQcm94eRIOCgZSb3dTdGUYASABKAkSDgoGUm93RXJy",
            "GAIgASgJEg4KBlJvd1VzchgDIAEoBBIOCgZSb3dLZXkYBCABKAQSCgoCQ0MY",
            "BSABKAQSCwoDSENUGAYgASgEEgsKA0dDVBgHIAEoBBILCgNUcmgYCCABKAMS",
            "CwoDRHJtGAkgASgJEgsKA1llchgKIAEoCRIMCgRJbmZvGAsgASgJIrkECghN",
            "QUNQcm94eRIOCgZSb3dTdGUYASABKAkSDgoGUm93RXJyGAIgASgJEg4KBlJv",
            "d1VzchgDIAEoBBIOCgZSb3dLZXkYBCABKAQSCgoCQ0MYBSABKAQSCwoDQ0VC",
            "GAYgASgEEgwKBEhQUDEYByABKAQSDAoESFBQMhgIIAEoBBIMCgRHUFAxGAkg",
            "ASgEEgwKBEdQUDIYCiABKAQSCwoDU29EGAsgASgJEgsKA0lkeBgMIAEoBRIL",
            "CgNUcmgYDSABKAMSCwoDRHJtGA4gASgJEgsKA1llchgPIAEoCRINCgVIYWtl",
            "bRgQIAEoCRIMCgRJbmZvGBEgASgJEgsKA0gxVxgSIAEoBRILCgNIMlcYEyAB",
            "KAUSCwoDSDNXGBQgASgFEgsKA0g0VxgVIAEoBRILCgNINVcYFiABKAUSCwoD",
            "SDZXGBcgASgFEgsKA0g3VxgYIAEoBRILCgNHMVcYGSABKAUSCwoDRzJXGBog",
            "ASgFEgsKA0czVxgbIAEoBRILCgNHNFcYHCABKAUSCwoDRzVXGB0gASgFEgsK",
            "A0c2VxgeIAEoBRILCgNHN1cYHyABKAUSCwoDSFNXGCAgASgFEgsKA0dTVxgh",
            "IAEoBRILCgNITVcYIiABKAUSCwoDR01XGCMgASgFEgsKA0hYVxgkIAEoBRIL",
            "CgNHWFcYJSABKAUSDAoESFJuaxgmIAEoBRIOCgZIUm5rUFgYJyABKAUSDAoE",
            "R1JuaxgoIAEoBRIOCgZHUm5rUFgYKSABKAUy8AUKBUNSVURzEj8KDFJlZnJl",
            "c2hTb251YxIRLlJlc3RMaWIuUXJ5UHJveHkaGi5SZXN0TGliLlJlZnJlc2hT",
            "b251Y1Byb3h5IgASMQoGUFBGaWxsEhEuUmVzdExpYi5RcnlQcm94eRoQLlJl",
            "c3RMaWIuUFBQcm94eSIAMAESMAoIUFBVcGRhdGUSEC5SZXN0TGliLlBQUHJv",
            "eHkaEC5SZXN0TGliLlBQUHJveHkiABIxCgZDQ0ZpbGwSES5SZXN0TGliLlFy",
            "eVByb3h5GhAuUmVzdExpYi5DQ1Byb3h5IgAwARIwCghDQ1VwZGF0ZRIQLlJl",
            "c3RMaWIuQ0NQcm94eRoQLlJlc3RMaWIuQ0NQcm94eSIAEjEKBkNURmlsbBIR",
            "LlJlc3RMaWIuUXJ5UHJveHkaEC5SZXN0TGliLkNUUHJveHkiADABEjAKCENU",
            "VXBkYXRlEhAuUmVzdExpYi5DVFByb3h5GhAuUmVzdExpYi5DVFByb3h5IgAS",
            "MwoHQ1RQRmlsbBIRLlJlc3RMaWIuUXJ5UHJveHkaES5SZXN0TGliLkNUUFBy",
            "b3h5IgAwARIzCglDVFBVcGRhdGUSES5SZXN0TGliLkNUUFByb3h5GhEuUmVz",
            "dExpYi5DVFBQcm94eSIAEjMKB0NFVEZpbGwSES5SZXN0TGliLlFyeVByb3h5",
            "GhEuUmVzdExpYi5DRVRQcm94eSIAMAESMwoJQ0VUVXBkYXRlEhEuUmVzdExp",
            "Yi5DRVRQcm94eRoRLlJlc3RMaWIuQ0VUUHJveHkiABIzCgdNQUNGaWxsEhEu",
            "UmVzdExpYi5RcnlQcm94eRoRLlJlc3RMaWIuTUFDUHJveHkiADABEjMKCU1B",
            "Q1VwZGF0ZRIRLlJlc3RMaWIuTUFDUHJveHkaES5SZXN0TGliLk1BQ1Byb3h5",
            "IgASOQoIUFBsb29rVXASES5SZXN0TGliLlFyeVByb3h5GhYuUmVzdExpYi5Q",
            "UGxvb2tVcFByb3h5IgAwAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RestLib.QryProxy), global::RestLib.QryProxy.Parser, new[]{ "Query", "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RestLib.RefreshSonucProxy), global::RestLib.RefreshSonucProxy.Parser, new[]{ "Query", "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RestLib.PPlookUpProxy), global::RestLib.PPlookUpProxy.Parser, new[]{ "RowKey", "Ad", "Sex", "CTs", "IsRun" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RestLib.PPProxy), global::RestLib.PPProxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Ad", "Info", "Sex", "Tel", "IsRun", "RnkBaz", "RnkSon", "RnkIdx", "SST", "SSW", "SSL", "SMT", "SMW", "SML", "DST", "DSW", "DSL", "DMT", "DMW", "DML" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RestLib.CCProxy), global::RestLib.CCProxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Ad", "Skl", "Grp", "Info", "IsRun", "IsRnkd", "TNSM", "TNDM", "TNSS", "TNDS", "TSMK", "TDMK", "TEGP", "TEMP", "TEBP", "TEXP" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RestLib.CTProxy), global::RestLib.CTProxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "CC", "K1", "K2", "Ad", "Info", "Adres", "IsRun", "SMW", "SML", "DMW", "DML", "KW", "KL", "KF", "EW", "EL", "EB", "EX", "PW" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RestLib.CTPProxy), global::RestLib.CTPProxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "CC", "CT", "PP", "Idx", "IsRun", "RnkBas", "RnkBit", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RestLib.CETProxy), global::RestLib.CETProxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "CC", "HCT", "GCT", "Trh", "Drm", "Yer", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RestLib.MACProxy), global::RestLib.MACProxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "CC", "CEB", "HPP1", "HPP2", "GPP1", "GPP2", "SoD", "Idx", "Trh", "Drm", "Yer", "Hakem", "Info", "H1W", "H2W", "H3W", "H4W", "H5W", "H6W", "H7W", "G1W", "G2W", "G3W", "G4W", "G5W", "G6W", "G7W", "HSW", "GSW", "HMW", "GMW", "HXW", "GXW", "HRnk", "HRnkPX", "GRnk", "GRnkPX" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class QryProxy : pb::IMessage<QryProxy> {
    private static readonly pb::MessageParser<QryProxy> _parser = new pb::MessageParser<QryProxy>(() => new QryProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QryProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RestLib.CRUDReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryProxy(QryProxy other) : this() {
      query_ = other.query_;
      param_ = other.param_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryProxy Clone() {
      return new QryProxy(this);
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 2;
    private string param_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QryProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QryProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      if (Param != other.Param) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (Param.Length != 0) hash ^= Param.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Param);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QryProxy other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      if (other.Param.Length != 0) {
        Param = other.Param;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
          case 18: {
            Param = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RefreshSonucProxy : pb::IMessage<RefreshSonucProxy> {
    private static readonly pb::MessageParser<RefreshSonucProxy> _parser = new pb::MessageParser<RefreshSonucProxy>(() => new RefreshSonucProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RefreshSonucProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RestLib.CRUDReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshSonucProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshSonucProxy(RefreshSonucProxy other) : this() {
      query_ = other.query_;
      param_ = other.param_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshSonucProxy Clone() {
      return new RefreshSonucProxy(this);
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 2;
    private string param_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RefreshSonucProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RefreshSonucProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      if (Param != other.Param) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (Param.Length != 0) hash ^= Param.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Param);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RefreshSonucProxy other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      if (other.Param.Length != 0) {
        Param = other.Param;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
          case 18: {
            Param = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// PlayersLookup
  /// </summary>
  public sealed partial class PPlookUpProxy : pb::IMessage<PPlookUpProxy> {
    private static readonly pb::MessageParser<PPlookUpProxy> _parser = new pb::MessageParser<PPlookUpProxy>(() => new PPlookUpProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PPlookUpProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RestLib.CRUDReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PPlookUpProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PPlookUpProxy(PPlookUpProxy other) : this() {
      rowKey_ = other.rowKey_;
      ad_ = other.ad_;
      sex_ = other.sex_;
      cTs_ = other.cTs_;
      isRun_ = other.isRun_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PPlookUpProxy Clone() {
      return new PPlookUpProxy(this);
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 1;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 2;
    private string ad_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sex" field.</summary>
    public const int SexFieldNumber = 3;
    private string sex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sex {
      get { return sex_; }
      set {
        sex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CTs" field.</summary>
    public const int CTsFieldNumber = 5;
    private string cTs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CTs {
      get { return cTs_; }
      set {
        cTs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsRun" field.</summary>
    public const int IsRunFieldNumber = 6;
    private bool isRun_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRun {
      get { return isRun_; }
      set {
        isRun_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PPlookUpProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PPlookUpProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowKey != other.RowKey) return false;
      if (Ad != other.Ad) return false;
      if (Sex != other.Sex) return false;
      if (CTs != other.CTs) return false;
      if (IsRun != other.IsRun) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (Ad.Length != 0) hash ^= Ad.GetHashCode();
      if (Sex.Length != 0) hash ^= Sex.GetHashCode();
      if (CTs.Length != 0) hash ^= CTs.GetHashCode();
      if (IsRun != false) hash ^= IsRun.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowKey != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RowKey);
      }
      if (Ad.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ad);
      }
      if (Sex.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Sex);
      }
      if (CTs.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CTs);
      }
      if (IsRun != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsRun);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (Ad.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ad);
      }
      if (Sex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sex);
      }
      if (CTs.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CTs);
      }
      if (IsRun != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PPlookUpProxy other) {
      if (other == null) {
        return;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.Ad.Length != 0) {
        Ad = other.Ad;
      }
      if (other.Sex.Length != 0) {
        Sex = other.Sex;
      }
      if (other.CTs.Length != 0) {
        CTs = other.CTs;
      }
      if (other.IsRun != false) {
        IsRun = other.IsRun;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 18: {
            Ad = input.ReadString();
            break;
          }
          case 26: {
            Sex = input.ReadString();
            break;
          }
          case 42: {
            CTs = input.ReadString();
            break;
          }
          case 48: {
            IsRun = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Players
  /// </summary>
  public sealed partial class PPProxy : pb::IMessage<PPProxy> {
    private static readonly pb::MessageParser<PPProxy> _parser = new pb::MessageParser<PPProxy>(() => new PPProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PPProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RestLib.CRUDReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PPProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PPProxy(PPProxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      ad_ = other.ad_;
      info_ = other.info_;
      sex_ = other.sex_;
      tel_ = other.tel_;
      isRun_ = other.isRun_;
      rnkBaz_ = other.rnkBaz_;
      rnkSon_ = other.rnkSon_;
      rnkIdx_ = other.rnkIdx_;
      sST_ = other.sST_;
      sSW_ = other.sSW_;
      sSL_ = other.sSL_;
      sMT_ = other.sMT_;
      sMW_ = other.sMW_;
      sML_ = other.sML_;
      dST_ = other.dST_;
      dSW_ = other.dSW_;
      dSL_ = other.dSL_;
      dMT_ = other.dMT_;
      dMW_ = other.dMW_;
      dML_ = other.dML_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PPProxy Clone() {
      return new PPProxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 5;
    private string ad_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 6;
    private string info_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sex" field.</summary>
    public const int SexFieldNumber = 7;
    private string sex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sex {
      get { return sex_; }
      set {
        sex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Tel" field.</summary>
    public const int TelFieldNumber = 8;
    private string tel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tel {
      get { return tel_; }
      set {
        tel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsRun" field.</summary>
    public const int IsRunFieldNumber = 9;
    private bool isRun_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRun {
      get { return isRun_; }
      set {
        isRun_ = value;
      }
    }

    /// <summary>Field number for the "RnkBaz" field.</summary>
    public const int RnkBazFieldNumber = 10;
    private int rnkBaz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RnkBaz {
      get { return rnkBaz_; }
      set {
        rnkBaz_ = value;
      }
    }

    /// <summary>Field number for the "RnkSon" field.</summary>
    public const int RnkSonFieldNumber = 11;
    private int rnkSon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RnkSon {
      get { return rnkSon_; }
      set {
        rnkSon_ = value;
      }
    }

    /// <summary>Field number for the "RnkIdx" field.</summary>
    public const int RnkIdxFieldNumber = 12;
    private int rnkIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RnkIdx {
      get { return rnkIdx_; }
      set {
        rnkIdx_ = value;
      }
    }

    /// <summary>Field number for the "SST" field.</summary>
    public const int SSTFieldNumber = 13;
    private int sST_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SST {
      get { return sST_; }
      set {
        sST_ = value;
      }
    }

    /// <summary>Field number for the "SSW" field.</summary>
    public const int SSWFieldNumber = 14;
    private int sSW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SSW {
      get { return sSW_; }
      set {
        sSW_ = value;
      }
    }

    /// <summary>Field number for the "SSL" field.</summary>
    public const int SSLFieldNumber = 15;
    private int sSL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SSL {
      get { return sSL_; }
      set {
        sSL_ = value;
      }
    }

    /// <summary>Field number for the "SMT" field.</summary>
    public const int SMTFieldNumber = 16;
    private int sMT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SMT {
      get { return sMT_; }
      set {
        sMT_ = value;
      }
    }

    /// <summary>Field number for the "SMW" field.</summary>
    public const int SMWFieldNumber = 17;
    private int sMW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SMW {
      get { return sMW_; }
      set {
        sMW_ = value;
      }
    }

    /// <summary>Field number for the "SML" field.</summary>
    public const int SMLFieldNumber = 18;
    private int sML_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SML {
      get { return sML_; }
      set {
        sML_ = value;
      }
    }

    /// <summary>Field number for the "DST" field.</summary>
    public const int DSTFieldNumber = 19;
    private int dST_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DST {
      get { return dST_; }
      set {
        dST_ = value;
      }
    }

    /// <summary>Field number for the "DSW" field.</summary>
    public const int DSWFieldNumber = 20;
    private int dSW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DSW {
      get { return dSW_; }
      set {
        dSW_ = value;
      }
    }

    /// <summary>Field number for the "DSL" field.</summary>
    public const int DSLFieldNumber = 21;
    private int dSL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DSL {
      get { return dSL_; }
      set {
        dSL_ = value;
      }
    }

    /// <summary>Field number for the "DMT" field.</summary>
    public const int DMTFieldNumber = 22;
    private int dMT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DMT {
      get { return dMT_; }
      set {
        dMT_ = value;
      }
    }

    /// <summary>Field number for the "DMW" field.</summary>
    public const int DMWFieldNumber = 23;
    private int dMW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DMW {
      get { return dMW_; }
      set {
        dMW_ = value;
      }
    }

    /// <summary>Field number for the "DML" field.</summary>
    public const int DMLFieldNumber = 24;
    private int dML_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DML {
      get { return dML_; }
      set {
        dML_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PPProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PPProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      if (Sex != other.Sex) return false;
      if (Tel != other.Tel) return false;
      if (IsRun != other.IsRun) return false;
      if (RnkBaz != other.RnkBaz) return false;
      if (RnkSon != other.RnkSon) return false;
      if (RnkIdx != other.RnkIdx) return false;
      if (SST != other.SST) return false;
      if (SSW != other.SSW) return false;
      if (SSL != other.SSL) return false;
      if (SMT != other.SMT) return false;
      if (SMW != other.SMW) return false;
      if (SML != other.SML) return false;
      if (DST != other.DST) return false;
      if (DSW != other.DSW) return false;
      if (DSL != other.DSL) return false;
      if (DMT != other.DMT) return false;
      if (DMW != other.DMW) return false;
      if (DML != other.DML) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (Ad.Length != 0) hash ^= Ad.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      if (Sex.Length != 0) hash ^= Sex.GetHashCode();
      if (Tel.Length != 0) hash ^= Tel.GetHashCode();
      if (IsRun != false) hash ^= IsRun.GetHashCode();
      if (RnkBaz != 0) hash ^= RnkBaz.GetHashCode();
      if (RnkSon != 0) hash ^= RnkSon.GetHashCode();
      if (RnkIdx != 0) hash ^= RnkIdx.GetHashCode();
      if (SST != 0) hash ^= SST.GetHashCode();
      if (SSW != 0) hash ^= SSW.GetHashCode();
      if (SSL != 0) hash ^= SSL.GetHashCode();
      if (SMT != 0) hash ^= SMT.GetHashCode();
      if (SMW != 0) hash ^= SMW.GetHashCode();
      if (SML != 0) hash ^= SML.GetHashCode();
      if (DST != 0) hash ^= DST.GetHashCode();
      if (DSW != 0) hash ^= DSW.GetHashCode();
      if (DSL != 0) hash ^= DSL.GetHashCode();
      if (DMT != 0) hash ^= DMT.GetHashCode();
      if (DMW != 0) hash ^= DMW.GetHashCode();
      if (DML != 0) hash ^= DML.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (Ad.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Ad);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Info);
      }
      if (Sex.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Sex);
      }
      if (Tel.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Tel);
      }
      if (IsRun != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsRun);
      }
      if (RnkBaz != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RnkBaz);
      }
      if (RnkSon != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RnkSon);
      }
      if (RnkIdx != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RnkIdx);
      }
      if (SST != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(SST);
      }
      if (SSW != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SSW);
      }
      if (SSL != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(SSL);
      }
      if (SMT != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(SMT);
      }
      if (SMW != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SMW);
      }
      if (SML != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(SML);
      }
      if (DST != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(DST);
      }
      if (DSW != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(DSW);
      }
      if (DSL != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(DSL);
      }
      if (DMT != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(DMT);
      }
      if (DMW != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(DMW);
      }
      if (DML != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(DML);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (Ad.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ad);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      if (Sex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sex);
      }
      if (Tel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tel);
      }
      if (IsRun != false) {
        size += 1 + 1;
      }
      if (RnkBaz != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RnkBaz);
      }
      if (RnkSon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RnkSon);
      }
      if (RnkIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RnkIdx);
      }
      if (SST != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SST);
      }
      if (SSW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SSW);
      }
      if (SSL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SSL);
      }
      if (SMT != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SMT);
      }
      if (SMW != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SMW);
      }
      if (SML != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SML);
      }
      if (DST != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DST);
      }
      if (DSW != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DSW);
      }
      if (DSL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DSL);
      }
      if (DMT != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DMT);
      }
      if (DMW != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DMW);
      }
      if (DML != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DML);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PPProxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.Ad.Length != 0) {
        Ad = other.Ad;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
      if (other.Sex.Length != 0) {
        Sex = other.Sex;
      }
      if (other.Tel.Length != 0) {
        Tel = other.Tel;
      }
      if (other.IsRun != false) {
        IsRun = other.IsRun;
      }
      if (other.RnkBaz != 0) {
        RnkBaz = other.RnkBaz;
      }
      if (other.RnkSon != 0) {
        RnkSon = other.RnkSon;
      }
      if (other.RnkIdx != 0) {
        RnkIdx = other.RnkIdx;
      }
      if (other.SST != 0) {
        SST = other.SST;
      }
      if (other.SSW != 0) {
        SSW = other.SSW;
      }
      if (other.SSL != 0) {
        SSL = other.SSL;
      }
      if (other.SMT != 0) {
        SMT = other.SMT;
      }
      if (other.SMW != 0) {
        SMW = other.SMW;
      }
      if (other.SML != 0) {
        SML = other.SML;
      }
      if (other.DST != 0) {
        DST = other.DST;
      }
      if (other.DSW != 0) {
        DSW = other.DSW;
      }
      if (other.DSL != 0) {
        DSL = other.DSL;
      }
      if (other.DMT != 0) {
        DMT = other.DMT;
      }
      if (other.DMW != 0) {
        DMW = other.DMW;
      }
      if (other.DML != 0) {
        DML = other.DML;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 42: {
            Ad = input.ReadString();
            break;
          }
          case 50: {
            Info = input.ReadString();
            break;
          }
          case 58: {
            Sex = input.ReadString();
            break;
          }
          case 66: {
            Tel = input.ReadString();
            break;
          }
          case 72: {
            IsRun = input.ReadBool();
            break;
          }
          case 80: {
            RnkBaz = input.ReadInt32();
            break;
          }
          case 88: {
            RnkSon = input.ReadInt32();
            break;
          }
          case 96: {
            RnkIdx = input.ReadInt32();
            break;
          }
          case 104: {
            SST = input.ReadInt32();
            break;
          }
          case 112: {
            SSW = input.ReadInt32();
            break;
          }
          case 120: {
            SSL = input.ReadInt32();
            break;
          }
          case 128: {
            SMT = input.ReadInt32();
            break;
          }
          case 136: {
            SMW = input.ReadInt32();
            break;
          }
          case 144: {
            SML = input.ReadInt32();
            break;
          }
          case 152: {
            DST = input.ReadInt32();
            break;
          }
          case 160: {
            DSW = input.ReadInt32();
            break;
          }
          case 168: {
            DSL = input.ReadInt32();
            break;
          }
          case 176: {
            DMT = input.ReadInt32();
            break;
          }
          case 184: {
            DMW = input.ReadInt32();
            break;
          }
          case 192: {
            DML = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Competitions
  /// </summary>
  public sealed partial class CCProxy : pb::IMessage<CCProxy> {
    private static readonly pb::MessageParser<CCProxy> _parser = new pb::MessageParser<CCProxy>(() => new CCProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RestLib.CRUDReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCProxy(CCProxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      ad_ = other.ad_;
      skl_ = other.skl_;
      grp_ = other.grp_;
      info_ = other.info_;
      isRun_ = other.isRun_;
      isRnkd_ = other.isRnkd_;
      tNSM_ = other.tNSM_;
      tNDM_ = other.tNDM_;
      tNSS_ = other.tNSS_;
      tNDS_ = other.tNDS_;
      tSMK_ = other.tSMK_;
      tDMK_ = other.tDMK_;
      tEGP_ = other.tEGP_;
      tEMP_ = other.tEMP_;
      tEBP_ = other.tEBP_;
      tEXP_ = other.tEXP_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCProxy Clone() {
      return new CCProxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 5;
    private string ad_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Skl" field.</summary>
    public const int SklFieldNumber = 6;
    private string skl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Skl {
      get { return skl_; }
      set {
        skl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Grp" field.</summary>
    public const int GrpFieldNumber = 7;
    private string grp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Grp {
      get { return grp_; }
      set {
        grp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 8;
    private string info_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsRun" field.</summary>
    public const int IsRunFieldNumber = 9;
    private bool isRun_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRun {
      get { return isRun_; }
      set {
        isRun_ = value;
      }
    }

    /// <summary>Field number for the "IsRnkd" field.</summary>
    public const int IsRnkdFieldNumber = 10;
    private bool isRnkd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRnkd {
      get { return isRnkd_; }
      set {
        isRnkd_ = value;
      }
    }

    /// <summary>Field number for the "TNSM" field.</summary>
    public const int TNSMFieldNumber = 11;
    private int tNSM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TNSM {
      get { return tNSM_; }
      set {
        tNSM_ = value;
      }
    }

    /// <summary>Field number for the "TNDM" field.</summary>
    public const int TNDMFieldNumber = 12;
    private int tNDM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TNDM {
      get { return tNDM_; }
      set {
        tNDM_ = value;
      }
    }

    /// <summary>Field number for the "TNSS" field.</summary>
    public const int TNSSFieldNumber = 13;
    private int tNSS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TNSS {
      get { return tNSS_; }
      set {
        tNSS_ = value;
      }
    }

    /// <summary>Field number for the "TNDS" field.</summary>
    public const int TNDSFieldNumber = 14;
    private int tNDS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TNDS {
      get { return tNDS_; }
      set {
        tNDS_ = value;
      }
    }

    /// <summary>Field number for the "TSMK" field.</summary>
    public const int TSMKFieldNumber = 15;
    private int tSMK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TSMK {
      get { return tSMK_; }
      set {
        tSMK_ = value;
      }
    }

    /// <summary>Field number for the "TDMK" field.</summary>
    public const int TDMKFieldNumber = 16;
    private int tDMK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TDMK {
      get { return tDMK_; }
      set {
        tDMK_ = value;
      }
    }

    /// <summary>Field number for the "TEGP" field.</summary>
    public const int TEGPFieldNumber = 17;
    private int tEGP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TEGP {
      get { return tEGP_; }
      set {
        tEGP_ = value;
      }
    }

    /// <summary>Field number for the "TEMP" field.</summary>
    public const int TEMPFieldNumber = 18;
    private int tEMP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TEMP {
      get { return tEMP_; }
      set {
        tEMP_ = value;
      }
    }

    /// <summary>Field number for the "TEBP" field.</summary>
    public const int TEBPFieldNumber = 19;
    private int tEBP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TEBP {
      get { return tEBP_; }
      set {
        tEBP_ = value;
      }
    }

    /// <summary>Field number for the "TEXP" field.</summary>
    public const int TEXPFieldNumber = 20;
    private int tEXP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TEXP {
      get { return tEXP_; }
      set {
        tEXP_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Ad != other.Ad) return false;
      if (Skl != other.Skl) return false;
      if (Grp != other.Grp) return false;
      if (Info != other.Info) return false;
      if (IsRun != other.IsRun) return false;
      if (IsRnkd != other.IsRnkd) return false;
      if (TNSM != other.TNSM) return false;
      if (TNDM != other.TNDM) return false;
      if (TNSS != other.TNSS) return false;
      if (TNDS != other.TNDS) return false;
      if (TSMK != other.TSMK) return false;
      if (TDMK != other.TDMK) return false;
      if (TEGP != other.TEGP) return false;
      if (TEMP != other.TEMP) return false;
      if (TEBP != other.TEBP) return false;
      if (TEXP != other.TEXP) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (Ad.Length != 0) hash ^= Ad.GetHashCode();
      if (Skl.Length != 0) hash ^= Skl.GetHashCode();
      if (Grp.Length != 0) hash ^= Grp.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      if (IsRun != false) hash ^= IsRun.GetHashCode();
      if (IsRnkd != false) hash ^= IsRnkd.GetHashCode();
      if (TNSM != 0) hash ^= TNSM.GetHashCode();
      if (TNDM != 0) hash ^= TNDM.GetHashCode();
      if (TNSS != 0) hash ^= TNSS.GetHashCode();
      if (TNDS != 0) hash ^= TNDS.GetHashCode();
      if (TSMK != 0) hash ^= TSMK.GetHashCode();
      if (TDMK != 0) hash ^= TDMK.GetHashCode();
      if (TEGP != 0) hash ^= TEGP.GetHashCode();
      if (TEMP != 0) hash ^= TEMP.GetHashCode();
      if (TEBP != 0) hash ^= TEBP.GetHashCode();
      if (TEXP != 0) hash ^= TEXP.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (Ad.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Ad);
      }
      if (Skl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Skl);
      }
      if (Grp.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Grp);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Info);
      }
      if (IsRun != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsRun);
      }
      if (IsRnkd != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsRnkd);
      }
      if (TNSM != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TNSM);
      }
      if (TNDM != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TNDM);
      }
      if (TNSS != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(TNSS);
      }
      if (TNDS != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(TNDS);
      }
      if (TSMK != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(TSMK);
      }
      if (TDMK != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(TDMK);
      }
      if (TEGP != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(TEGP);
      }
      if (TEMP != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(TEMP);
      }
      if (TEBP != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(TEBP);
      }
      if (TEXP != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(TEXP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (Ad.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ad);
      }
      if (Skl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Skl);
      }
      if (Grp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Grp);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      if (IsRun != false) {
        size += 1 + 1;
      }
      if (IsRnkd != false) {
        size += 1 + 1;
      }
      if (TNSM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TNSM);
      }
      if (TNDM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TNDM);
      }
      if (TNSS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TNSS);
      }
      if (TNDS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TNDS);
      }
      if (TSMK != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TSMK);
      }
      if (TDMK != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TDMK);
      }
      if (TEGP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TEGP);
      }
      if (TEMP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TEMP);
      }
      if (TEBP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TEBP);
      }
      if (TEXP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TEXP);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCProxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.Ad.Length != 0) {
        Ad = other.Ad;
      }
      if (other.Skl.Length != 0) {
        Skl = other.Skl;
      }
      if (other.Grp.Length != 0) {
        Grp = other.Grp;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
      if (other.IsRun != false) {
        IsRun = other.IsRun;
      }
      if (other.IsRnkd != false) {
        IsRnkd = other.IsRnkd;
      }
      if (other.TNSM != 0) {
        TNSM = other.TNSM;
      }
      if (other.TNDM != 0) {
        TNDM = other.TNDM;
      }
      if (other.TNSS != 0) {
        TNSS = other.TNSS;
      }
      if (other.TNDS != 0) {
        TNDS = other.TNDS;
      }
      if (other.TSMK != 0) {
        TSMK = other.TSMK;
      }
      if (other.TDMK != 0) {
        TDMK = other.TDMK;
      }
      if (other.TEGP != 0) {
        TEGP = other.TEGP;
      }
      if (other.TEMP != 0) {
        TEMP = other.TEMP;
      }
      if (other.TEBP != 0) {
        TEBP = other.TEBP;
      }
      if (other.TEXP != 0) {
        TEXP = other.TEXP;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 42: {
            Ad = input.ReadString();
            break;
          }
          case 50: {
            Skl = input.ReadString();
            break;
          }
          case 58: {
            Grp = input.ReadString();
            break;
          }
          case 66: {
            Info = input.ReadString();
            break;
          }
          case 72: {
            IsRun = input.ReadBool();
            break;
          }
          case 80: {
            IsRnkd = input.ReadBool();
            break;
          }
          case 88: {
            TNSM = input.ReadInt32();
            break;
          }
          case 96: {
            TNDM = input.ReadInt32();
            break;
          }
          case 104: {
            TNSS = input.ReadInt32();
            break;
          }
          case 112: {
            TNDS = input.ReadInt32();
            break;
          }
          case 120: {
            TSMK = input.ReadInt32();
            break;
          }
          case 128: {
            TDMK = input.ReadInt32();
            break;
          }
          case 136: {
            TEGP = input.ReadInt32();
            break;
          }
          case 144: {
            TEMP = input.ReadInt32();
            break;
          }
          case 152: {
            TEBP = input.ReadInt32();
            break;
          }
          case 160: {
            TEXP = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Competition Teams
  /// </summary>
  public sealed partial class CTProxy : pb::IMessage<CTProxy> {
    private static readonly pb::MessageParser<CTProxy> _parser = new pb::MessageParser<CTProxy>(() => new CTProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CTProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RestLib.CRUDReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTProxy(CTProxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      cC_ = other.cC_;
      k1_ = other.k1_;
      k2_ = other.k2_;
      ad_ = other.ad_;
      info_ = other.info_;
      adres_ = other.adres_;
      isRun_ = other.isRun_;
      sMW_ = other.sMW_;
      sML_ = other.sML_;
      dMW_ = other.dMW_;
      dML_ = other.dML_;
      kW_ = other.kW_;
      kL_ = other.kL_;
      kF_ = other.kF_;
      eW_ = other.eW_;
      eL_ = other.eL_;
      eB_ = other.eB_;
      eX_ = other.eX_;
      pW_ = other.pW_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTProxy Clone() {
      return new CTProxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "CC" field.</summary>
    public const int CCFieldNumber = 5;
    private ulong cC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CC {
      get { return cC_; }
      set {
        cC_ = value;
      }
    }

    /// <summary>Field number for the "K1" field.</summary>
    public const int K1FieldNumber = 6;
    private ulong k1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong K1 {
      get { return k1_; }
      set {
        k1_ = value;
      }
    }

    /// <summary>Field number for the "K2" field.</summary>
    public const int K2FieldNumber = 7;
    private ulong k2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong K2 {
      get { return k2_; }
      set {
        k2_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 8;
    private string ad_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 9;
    private string info_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Adres" field.</summary>
    public const int AdresFieldNumber = 10;
    private string adres_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Adres {
      get { return adres_; }
      set {
        adres_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsRun" field.</summary>
    public const int IsRunFieldNumber = 11;
    private bool isRun_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRun {
      get { return isRun_; }
      set {
        isRun_ = value;
      }
    }

    /// <summary>Field number for the "SMW" field.</summary>
    public const int SMWFieldNumber = 12;
    private int sMW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SMW {
      get { return sMW_; }
      set {
        sMW_ = value;
      }
    }

    /// <summary>Field number for the "SML" field.</summary>
    public const int SMLFieldNumber = 13;
    private int sML_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SML {
      get { return sML_; }
      set {
        sML_ = value;
      }
    }

    /// <summary>Field number for the "DMW" field.</summary>
    public const int DMWFieldNumber = 14;
    private int dMW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DMW {
      get { return dMW_; }
      set {
        dMW_ = value;
      }
    }

    /// <summary>Field number for the "DML" field.</summary>
    public const int DMLFieldNumber = 15;
    private int dML_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DML {
      get { return dML_; }
      set {
        dML_ = value;
      }
    }

    /// <summary>Field number for the "KW" field.</summary>
    public const int KWFieldNumber = 16;
    private int kW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KW {
      get { return kW_; }
      set {
        kW_ = value;
      }
    }

    /// <summary>Field number for the "KL" field.</summary>
    public const int KLFieldNumber = 17;
    private int kL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KL {
      get { return kL_; }
      set {
        kL_ = value;
      }
    }

    /// <summary>Field number for the "KF" field.</summary>
    public const int KFFieldNumber = 18;
    private int kF_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KF {
      get { return kF_; }
      set {
        kF_ = value;
      }
    }

    /// <summary>Field number for the "EW" field.</summary>
    public const int EWFieldNumber = 19;
    private int eW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EW {
      get { return eW_; }
      set {
        eW_ = value;
      }
    }

    /// <summary>Field number for the "EL" field.</summary>
    public const int ELFieldNumber = 20;
    private int eL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EL {
      get { return eL_; }
      set {
        eL_ = value;
      }
    }

    /// <summary>Field number for the "EB" field.</summary>
    public const int EBFieldNumber = 21;
    private int eB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EB {
      get { return eB_; }
      set {
        eB_ = value;
      }
    }

    /// <summary>Field number for the "EX" field.</summary>
    public const int EXFieldNumber = 22;
    private int eX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EX {
      get { return eX_; }
      set {
        eX_ = value;
      }
    }

    /// <summary>Field number for the "PW" field.</summary>
    public const int PWFieldNumber = 23;
    private int pW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PW {
      get { return pW_; }
      set {
        pW_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CTProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CTProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (CC != other.CC) return false;
      if (K1 != other.K1) return false;
      if (K2 != other.K2) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      if (Adres != other.Adres) return false;
      if (IsRun != other.IsRun) return false;
      if (SMW != other.SMW) return false;
      if (SML != other.SML) return false;
      if (DMW != other.DMW) return false;
      if (DML != other.DML) return false;
      if (KW != other.KW) return false;
      if (KL != other.KL) return false;
      if (KF != other.KF) return false;
      if (EW != other.EW) return false;
      if (EL != other.EL) return false;
      if (EB != other.EB) return false;
      if (EX != other.EX) return false;
      if (PW != other.PW) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (CC != 0UL) hash ^= CC.GetHashCode();
      if (K1 != 0UL) hash ^= K1.GetHashCode();
      if (K2 != 0UL) hash ^= K2.GetHashCode();
      if (Ad.Length != 0) hash ^= Ad.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      if (Adres.Length != 0) hash ^= Adres.GetHashCode();
      if (IsRun != false) hash ^= IsRun.GetHashCode();
      if (SMW != 0) hash ^= SMW.GetHashCode();
      if (SML != 0) hash ^= SML.GetHashCode();
      if (DMW != 0) hash ^= DMW.GetHashCode();
      if (DML != 0) hash ^= DML.GetHashCode();
      if (KW != 0) hash ^= KW.GetHashCode();
      if (KL != 0) hash ^= KL.GetHashCode();
      if (KF != 0) hash ^= KF.GetHashCode();
      if (EW != 0) hash ^= EW.GetHashCode();
      if (EL != 0) hash ^= EL.GetHashCode();
      if (EB != 0) hash ^= EB.GetHashCode();
      if (EX != 0) hash ^= EX.GetHashCode();
      if (PW != 0) hash ^= PW.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (CC != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(CC);
      }
      if (K1 != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(K1);
      }
      if (K2 != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(K2);
      }
      if (Ad.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Ad);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Info);
      }
      if (Adres.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Adres);
      }
      if (IsRun != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsRun);
      }
      if (SMW != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(SMW);
      }
      if (SML != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(SML);
      }
      if (DMW != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(DMW);
      }
      if (DML != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(DML);
      }
      if (KW != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(KW);
      }
      if (KL != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(KL);
      }
      if (KF != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(KF);
      }
      if (EW != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(EW);
      }
      if (EL != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(EL);
      }
      if (EB != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(EB);
      }
      if (EX != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(EX);
      }
      if (PW != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(PW);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (CC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CC);
      }
      if (K1 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(K1);
      }
      if (K2 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(K2);
      }
      if (Ad.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ad);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      if (Adres.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Adres);
      }
      if (IsRun != false) {
        size += 1 + 1;
      }
      if (SMW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SMW);
      }
      if (SML != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SML);
      }
      if (DMW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DMW);
      }
      if (DML != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DML);
      }
      if (KW != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(KW);
      }
      if (KL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(KL);
      }
      if (KF != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(KF);
      }
      if (EW != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EW);
      }
      if (EL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EL);
      }
      if (EB != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EB);
      }
      if (EX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EX);
      }
      if (PW != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PW);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CTProxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.CC != 0UL) {
        CC = other.CC;
      }
      if (other.K1 != 0UL) {
        K1 = other.K1;
      }
      if (other.K2 != 0UL) {
        K2 = other.K2;
      }
      if (other.Ad.Length != 0) {
        Ad = other.Ad;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
      if (other.Adres.Length != 0) {
        Adres = other.Adres;
      }
      if (other.IsRun != false) {
        IsRun = other.IsRun;
      }
      if (other.SMW != 0) {
        SMW = other.SMW;
      }
      if (other.SML != 0) {
        SML = other.SML;
      }
      if (other.DMW != 0) {
        DMW = other.DMW;
      }
      if (other.DML != 0) {
        DML = other.DML;
      }
      if (other.KW != 0) {
        KW = other.KW;
      }
      if (other.KL != 0) {
        KL = other.KL;
      }
      if (other.KF != 0) {
        KF = other.KF;
      }
      if (other.EW != 0) {
        EW = other.EW;
      }
      if (other.EL != 0) {
        EL = other.EL;
      }
      if (other.EB != 0) {
        EB = other.EB;
      }
      if (other.EX != 0) {
        EX = other.EX;
      }
      if (other.PW != 0) {
        PW = other.PW;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            CC = input.ReadUInt64();
            break;
          }
          case 48: {
            K1 = input.ReadUInt64();
            break;
          }
          case 56: {
            K2 = input.ReadUInt64();
            break;
          }
          case 66: {
            Ad = input.ReadString();
            break;
          }
          case 74: {
            Info = input.ReadString();
            break;
          }
          case 82: {
            Adres = input.ReadString();
            break;
          }
          case 88: {
            IsRun = input.ReadBool();
            break;
          }
          case 96: {
            SMW = input.ReadInt32();
            break;
          }
          case 104: {
            SML = input.ReadInt32();
            break;
          }
          case 112: {
            DMW = input.ReadInt32();
            break;
          }
          case 120: {
            DML = input.ReadInt32();
            break;
          }
          case 128: {
            KW = input.ReadInt32();
            break;
          }
          case 136: {
            KL = input.ReadInt32();
            break;
          }
          case 144: {
            KF = input.ReadInt32();
            break;
          }
          case 152: {
            EW = input.ReadInt32();
            break;
          }
          case 160: {
            EL = input.ReadInt32();
            break;
          }
          case 168: {
            EB = input.ReadInt32();
            break;
          }
          case 176: {
            EX = input.ReadInt32();
            break;
          }
          case 184: {
            PW = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Competition Team Players
  /// </summary>
  public sealed partial class CTPProxy : pb::IMessage<CTPProxy> {
    private static readonly pb::MessageParser<CTPProxy> _parser = new pb::MessageParser<CTPProxy>(() => new CTPProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CTPProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RestLib.CRUDReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTPProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTPProxy(CTPProxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      cC_ = other.cC_;
      cT_ = other.cT_;
      pP_ = other.pP_;
      idx_ = other.idx_;
      isRun_ = other.isRun_;
      rnkBas_ = other.rnkBas_;
      rnkBit_ = other.rnkBit_;
      info_ = other.info_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTPProxy Clone() {
      return new CTPProxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "CC" field.</summary>
    public const int CCFieldNumber = 5;
    private ulong cC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CC {
      get { return cC_; }
      set {
        cC_ = value;
      }
    }

    /// <summary>Field number for the "CT" field.</summary>
    public const int CTFieldNumber = 6;
    private ulong cT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CT {
      get { return cT_; }
      set {
        cT_ = value;
      }
    }

    /// <summary>Field number for the "PP" field.</summary>
    public const int PPFieldNumber = 7;
    private ulong pP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PP {
      get { return pP_; }
      set {
        pP_ = value;
      }
    }

    /// <summary>Field number for the "Idx" field.</summary>
    public const int IdxFieldNumber = 8;
    private int idx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idx {
      get { return idx_; }
      set {
        idx_ = value;
      }
    }

    /// <summary>Field number for the "IsRun" field.</summary>
    public const int IsRunFieldNumber = 9;
    private bool isRun_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRun {
      get { return isRun_; }
      set {
        isRun_ = value;
      }
    }

    /// <summary>Field number for the "RnkBas" field.</summary>
    public const int RnkBasFieldNumber = 10;
    private int rnkBas_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RnkBas {
      get { return rnkBas_; }
      set {
        rnkBas_ = value;
      }
    }

    /// <summary>Field number for the "RnkBit" field.</summary>
    public const int RnkBitFieldNumber = 11;
    private int rnkBit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RnkBit {
      get { return rnkBit_; }
      set {
        rnkBit_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 12;
    private string info_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CTPProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CTPProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (CC != other.CC) return false;
      if (CT != other.CT) return false;
      if (PP != other.PP) return false;
      if (Idx != other.Idx) return false;
      if (IsRun != other.IsRun) return false;
      if (RnkBas != other.RnkBas) return false;
      if (RnkBit != other.RnkBit) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (CC != 0UL) hash ^= CC.GetHashCode();
      if (CT != 0UL) hash ^= CT.GetHashCode();
      if (PP != 0UL) hash ^= PP.GetHashCode();
      if (Idx != 0) hash ^= Idx.GetHashCode();
      if (IsRun != false) hash ^= IsRun.GetHashCode();
      if (RnkBas != 0) hash ^= RnkBas.GetHashCode();
      if (RnkBit != 0) hash ^= RnkBit.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (CC != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(CC);
      }
      if (CT != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(CT);
      }
      if (PP != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(PP);
      }
      if (Idx != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Idx);
      }
      if (IsRun != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsRun);
      }
      if (RnkBas != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RnkBas);
      }
      if (RnkBit != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RnkBit);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (CC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CC);
      }
      if (CT != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CT);
      }
      if (PP != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PP);
      }
      if (Idx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      if (IsRun != false) {
        size += 1 + 1;
      }
      if (RnkBas != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RnkBas);
      }
      if (RnkBit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RnkBit);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CTPProxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.CC != 0UL) {
        CC = other.CC;
      }
      if (other.CT != 0UL) {
        CT = other.CT;
      }
      if (other.PP != 0UL) {
        PP = other.PP;
      }
      if (other.Idx != 0) {
        Idx = other.Idx;
      }
      if (other.IsRun != false) {
        IsRun = other.IsRun;
      }
      if (other.RnkBas != 0) {
        RnkBas = other.RnkBas;
      }
      if (other.RnkBit != 0) {
        RnkBit = other.RnkBit;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            CC = input.ReadUInt64();
            break;
          }
          case 48: {
            CT = input.ReadUInt64();
            break;
          }
          case 56: {
            PP = input.ReadUInt64();
            break;
          }
          case 64: {
            Idx = input.ReadInt32();
            break;
          }
          case 72: {
            IsRun = input.ReadBool();
            break;
          }
          case 80: {
            RnkBas = input.ReadInt32();
            break;
          }
          case 88: {
            RnkBit = input.ReadInt32();
            break;
          }
          case 98: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Competition Team Events
  /// </summary>
  public sealed partial class CETProxy : pb::IMessage<CETProxy> {
    private static readonly pb::MessageParser<CETProxy> _parser = new pb::MessageParser<CETProxy>(() => new CETProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CETProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RestLib.CRUDReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CETProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CETProxy(CETProxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      cC_ = other.cC_;
      hCT_ = other.hCT_;
      gCT_ = other.gCT_;
      trh_ = other.trh_;
      drm_ = other.drm_;
      yer_ = other.yer_;
      info_ = other.info_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CETProxy Clone() {
      return new CETProxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "CC" field.</summary>
    public const int CCFieldNumber = 5;
    private ulong cC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CC {
      get { return cC_; }
      set {
        cC_ = value;
      }
    }

    /// <summary>Field number for the "HCT" field.</summary>
    public const int HCTFieldNumber = 6;
    private ulong hCT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HCT {
      get { return hCT_; }
      set {
        hCT_ = value;
      }
    }

    /// <summary>Field number for the "GCT" field.</summary>
    public const int GCTFieldNumber = 7;
    private ulong gCT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GCT {
      get { return gCT_; }
      set {
        gCT_ = value;
      }
    }

    /// <summary>Field number for the "Trh" field.</summary>
    public const int TrhFieldNumber = 8;
    private long trh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Trh {
      get { return trh_; }
      set {
        trh_ = value;
      }
    }

    /// <summary>Field number for the "Drm" field.</summary>
    public const int DrmFieldNumber = 9;
    private string drm_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Drm {
      get { return drm_; }
      set {
        drm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Yer" field.</summary>
    public const int YerFieldNumber = 10;
    private string yer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Yer {
      get { return yer_; }
      set {
        yer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 11;
    private string info_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CETProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CETProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (CC != other.CC) return false;
      if (HCT != other.HCT) return false;
      if (GCT != other.GCT) return false;
      if (Trh != other.Trh) return false;
      if (Drm != other.Drm) return false;
      if (Yer != other.Yer) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (CC != 0UL) hash ^= CC.GetHashCode();
      if (HCT != 0UL) hash ^= HCT.GetHashCode();
      if (GCT != 0UL) hash ^= GCT.GetHashCode();
      if (Trh != 0L) hash ^= Trh.GetHashCode();
      if (Drm.Length != 0) hash ^= Drm.GetHashCode();
      if (Yer.Length != 0) hash ^= Yer.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (CC != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(CC);
      }
      if (HCT != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(HCT);
      }
      if (GCT != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(GCT);
      }
      if (Trh != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Trh);
      }
      if (Drm.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Drm);
      }
      if (Yer.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Yer);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (CC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CC);
      }
      if (HCT != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HCT);
      }
      if (GCT != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GCT);
      }
      if (Trh != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Trh);
      }
      if (Drm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Drm);
      }
      if (Yer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Yer);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CETProxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.CC != 0UL) {
        CC = other.CC;
      }
      if (other.HCT != 0UL) {
        HCT = other.HCT;
      }
      if (other.GCT != 0UL) {
        GCT = other.GCT;
      }
      if (other.Trh != 0L) {
        Trh = other.Trh;
      }
      if (other.Drm.Length != 0) {
        Drm = other.Drm;
      }
      if (other.Yer.Length != 0) {
        Yer = other.Yer;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            CC = input.ReadUInt64();
            break;
          }
          case 48: {
            HCT = input.ReadUInt64();
            break;
          }
          case 56: {
            GCT = input.ReadUInt64();
            break;
          }
          case 64: {
            Trh = input.ReadInt64();
            break;
          }
          case 74: {
            Drm = input.ReadString();
            break;
          }
          case 82: {
            Yer = input.ReadString();
            break;
          }
          case 90: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Mac
  /// </summary>
  public sealed partial class MACProxy : pb::IMessage<MACProxy> {
    private static readonly pb::MessageParser<MACProxy> _parser = new pb::MessageParser<MACProxy>(() => new MACProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MACProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RestLib.CRUDReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MACProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MACProxy(MACProxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      cC_ = other.cC_;
      cEB_ = other.cEB_;
      hPP1_ = other.hPP1_;
      hPP2_ = other.hPP2_;
      gPP1_ = other.gPP1_;
      gPP2_ = other.gPP2_;
      soD_ = other.soD_;
      idx_ = other.idx_;
      trh_ = other.trh_;
      drm_ = other.drm_;
      yer_ = other.yer_;
      hakem_ = other.hakem_;
      info_ = other.info_;
      h1W_ = other.h1W_;
      h2W_ = other.h2W_;
      h3W_ = other.h3W_;
      h4W_ = other.h4W_;
      h5W_ = other.h5W_;
      h6W_ = other.h6W_;
      h7W_ = other.h7W_;
      g1W_ = other.g1W_;
      g2W_ = other.g2W_;
      g3W_ = other.g3W_;
      g4W_ = other.g4W_;
      g5W_ = other.g5W_;
      g6W_ = other.g6W_;
      g7W_ = other.g7W_;
      hSW_ = other.hSW_;
      gSW_ = other.gSW_;
      hMW_ = other.hMW_;
      gMW_ = other.gMW_;
      hXW_ = other.hXW_;
      gXW_ = other.gXW_;
      hRnk_ = other.hRnk_;
      hRnkPX_ = other.hRnkPX_;
      gRnk_ = other.gRnk_;
      gRnkPX_ = other.gRnkPX_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MACProxy Clone() {
      return new MACProxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "CC" field.</summary>
    public const int CCFieldNumber = 5;
    private ulong cC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CC {
      get { return cC_; }
      set {
        cC_ = value;
      }
    }

    /// <summary>Field number for the "CEB" field.</summary>
    public const int CEBFieldNumber = 6;
    private ulong cEB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CEB {
      get { return cEB_; }
      set {
        cEB_ = value;
      }
    }

    /// <summary>Field number for the "HPP1" field.</summary>
    public const int HPP1FieldNumber = 7;
    private ulong hPP1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HPP1 {
      get { return hPP1_; }
      set {
        hPP1_ = value;
      }
    }

    /// <summary>Field number for the "HPP2" field.</summary>
    public const int HPP2FieldNumber = 8;
    private ulong hPP2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HPP2 {
      get { return hPP2_; }
      set {
        hPP2_ = value;
      }
    }

    /// <summary>Field number for the "GPP1" field.</summary>
    public const int GPP1FieldNumber = 9;
    private ulong gPP1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GPP1 {
      get { return gPP1_; }
      set {
        gPP1_ = value;
      }
    }

    /// <summary>Field number for the "GPP2" field.</summary>
    public const int GPP2FieldNumber = 10;
    private ulong gPP2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GPP2 {
      get { return gPP2_; }
      set {
        gPP2_ = value;
      }
    }

    /// <summary>Field number for the "SoD" field.</summary>
    public const int SoDFieldNumber = 11;
    private string soD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoD {
      get { return soD_; }
      set {
        soD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Idx" field.</summary>
    public const int IdxFieldNumber = 12;
    private int idx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idx {
      get { return idx_; }
      set {
        idx_ = value;
      }
    }

    /// <summary>Field number for the "Trh" field.</summary>
    public const int TrhFieldNumber = 13;
    private long trh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Trh {
      get { return trh_; }
      set {
        trh_ = value;
      }
    }

    /// <summary>Field number for the "Drm" field.</summary>
    public const int DrmFieldNumber = 14;
    private string drm_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Drm {
      get { return drm_; }
      set {
        drm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Yer" field.</summary>
    public const int YerFieldNumber = 15;
    private string yer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Yer {
      get { return yer_; }
      set {
        yer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Hakem" field.</summary>
    public const int HakemFieldNumber = 16;
    private string hakem_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hakem {
      get { return hakem_; }
      set {
        hakem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 17;
    private string info_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "H1W" field.</summary>
    public const int H1WFieldNumber = 18;
    private int h1W_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int H1W {
      get { return h1W_; }
      set {
        h1W_ = value;
      }
    }

    /// <summary>Field number for the "H2W" field.</summary>
    public const int H2WFieldNumber = 19;
    private int h2W_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int H2W {
      get { return h2W_; }
      set {
        h2W_ = value;
      }
    }

    /// <summary>Field number for the "H3W" field.</summary>
    public const int H3WFieldNumber = 20;
    private int h3W_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int H3W {
      get { return h3W_; }
      set {
        h3W_ = value;
      }
    }

    /// <summary>Field number for the "H4W" field.</summary>
    public const int H4WFieldNumber = 21;
    private int h4W_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int H4W {
      get { return h4W_; }
      set {
        h4W_ = value;
      }
    }

    /// <summary>Field number for the "H5W" field.</summary>
    public const int H5WFieldNumber = 22;
    private int h5W_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int H5W {
      get { return h5W_; }
      set {
        h5W_ = value;
      }
    }

    /// <summary>Field number for the "H6W" field.</summary>
    public const int H6WFieldNumber = 23;
    private int h6W_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int H6W {
      get { return h6W_; }
      set {
        h6W_ = value;
      }
    }

    /// <summary>Field number for the "H7W" field.</summary>
    public const int H7WFieldNumber = 24;
    private int h7W_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int H7W {
      get { return h7W_; }
      set {
        h7W_ = value;
      }
    }

    /// <summary>Field number for the "G1W" field.</summary>
    public const int G1WFieldNumber = 25;
    private int g1W_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int G1W {
      get { return g1W_; }
      set {
        g1W_ = value;
      }
    }

    /// <summary>Field number for the "G2W" field.</summary>
    public const int G2WFieldNumber = 26;
    private int g2W_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int G2W {
      get { return g2W_; }
      set {
        g2W_ = value;
      }
    }

    /// <summary>Field number for the "G3W" field.</summary>
    public const int G3WFieldNumber = 27;
    private int g3W_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int G3W {
      get { return g3W_; }
      set {
        g3W_ = value;
      }
    }

    /// <summary>Field number for the "G4W" field.</summary>
    public const int G4WFieldNumber = 28;
    private int g4W_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int G4W {
      get { return g4W_; }
      set {
        g4W_ = value;
      }
    }

    /// <summary>Field number for the "G5W" field.</summary>
    public const int G5WFieldNumber = 29;
    private int g5W_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int G5W {
      get { return g5W_; }
      set {
        g5W_ = value;
      }
    }

    /// <summary>Field number for the "G6W" field.</summary>
    public const int G6WFieldNumber = 30;
    private int g6W_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int G6W {
      get { return g6W_; }
      set {
        g6W_ = value;
      }
    }

    /// <summary>Field number for the "G7W" field.</summary>
    public const int G7WFieldNumber = 31;
    private int g7W_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int G7W {
      get { return g7W_; }
      set {
        g7W_ = value;
      }
    }

    /// <summary>Field number for the "HSW" field.</summary>
    public const int HSWFieldNumber = 32;
    private int hSW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HSW {
      get { return hSW_; }
      set {
        hSW_ = value;
      }
    }

    /// <summary>Field number for the "GSW" field.</summary>
    public const int GSWFieldNumber = 33;
    private int gSW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GSW {
      get { return gSW_; }
      set {
        gSW_ = value;
      }
    }

    /// <summary>Field number for the "HMW" field.</summary>
    public const int HMWFieldNumber = 34;
    private int hMW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HMW {
      get { return hMW_; }
      set {
        hMW_ = value;
      }
    }

    /// <summary>Field number for the "GMW" field.</summary>
    public const int GMWFieldNumber = 35;
    private int gMW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMW {
      get { return gMW_; }
      set {
        gMW_ = value;
      }
    }

    /// <summary>Field number for the "HXW" field.</summary>
    public const int HXWFieldNumber = 36;
    private int hXW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HXW {
      get { return hXW_; }
      set {
        hXW_ = value;
      }
    }

    /// <summary>Field number for the "GXW" field.</summary>
    public const int GXWFieldNumber = 37;
    private int gXW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GXW {
      get { return gXW_; }
      set {
        gXW_ = value;
      }
    }

    /// <summary>Field number for the "HRnk" field.</summary>
    public const int HRnkFieldNumber = 38;
    private int hRnk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HRnk {
      get { return hRnk_; }
      set {
        hRnk_ = value;
      }
    }

    /// <summary>Field number for the "HRnkPX" field.</summary>
    public const int HRnkPXFieldNumber = 39;
    private int hRnkPX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HRnkPX {
      get { return hRnkPX_; }
      set {
        hRnkPX_ = value;
      }
    }

    /// <summary>Field number for the "GRnk" field.</summary>
    public const int GRnkFieldNumber = 40;
    private int gRnk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GRnk {
      get { return gRnk_; }
      set {
        gRnk_ = value;
      }
    }

    /// <summary>Field number for the "GRnkPX" field.</summary>
    public const int GRnkPXFieldNumber = 41;
    private int gRnkPX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GRnkPX {
      get { return gRnkPX_; }
      set {
        gRnkPX_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MACProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MACProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (CC != other.CC) return false;
      if (CEB != other.CEB) return false;
      if (HPP1 != other.HPP1) return false;
      if (HPP2 != other.HPP2) return false;
      if (GPP1 != other.GPP1) return false;
      if (GPP2 != other.GPP2) return false;
      if (SoD != other.SoD) return false;
      if (Idx != other.Idx) return false;
      if (Trh != other.Trh) return false;
      if (Drm != other.Drm) return false;
      if (Yer != other.Yer) return false;
      if (Hakem != other.Hakem) return false;
      if (Info != other.Info) return false;
      if (H1W != other.H1W) return false;
      if (H2W != other.H2W) return false;
      if (H3W != other.H3W) return false;
      if (H4W != other.H4W) return false;
      if (H5W != other.H5W) return false;
      if (H6W != other.H6W) return false;
      if (H7W != other.H7W) return false;
      if (G1W != other.G1W) return false;
      if (G2W != other.G2W) return false;
      if (G3W != other.G3W) return false;
      if (G4W != other.G4W) return false;
      if (G5W != other.G5W) return false;
      if (G6W != other.G6W) return false;
      if (G7W != other.G7W) return false;
      if (HSW != other.HSW) return false;
      if (GSW != other.GSW) return false;
      if (HMW != other.HMW) return false;
      if (GMW != other.GMW) return false;
      if (HXW != other.HXW) return false;
      if (GXW != other.GXW) return false;
      if (HRnk != other.HRnk) return false;
      if (HRnkPX != other.HRnkPX) return false;
      if (GRnk != other.GRnk) return false;
      if (GRnkPX != other.GRnkPX) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (CC != 0UL) hash ^= CC.GetHashCode();
      if (CEB != 0UL) hash ^= CEB.GetHashCode();
      if (HPP1 != 0UL) hash ^= HPP1.GetHashCode();
      if (HPP2 != 0UL) hash ^= HPP2.GetHashCode();
      if (GPP1 != 0UL) hash ^= GPP1.GetHashCode();
      if (GPP2 != 0UL) hash ^= GPP2.GetHashCode();
      if (SoD.Length != 0) hash ^= SoD.GetHashCode();
      if (Idx != 0) hash ^= Idx.GetHashCode();
      if (Trh != 0L) hash ^= Trh.GetHashCode();
      if (Drm.Length != 0) hash ^= Drm.GetHashCode();
      if (Yer.Length != 0) hash ^= Yer.GetHashCode();
      if (Hakem.Length != 0) hash ^= Hakem.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      if (H1W != 0) hash ^= H1W.GetHashCode();
      if (H2W != 0) hash ^= H2W.GetHashCode();
      if (H3W != 0) hash ^= H3W.GetHashCode();
      if (H4W != 0) hash ^= H4W.GetHashCode();
      if (H5W != 0) hash ^= H5W.GetHashCode();
      if (H6W != 0) hash ^= H6W.GetHashCode();
      if (H7W != 0) hash ^= H7W.GetHashCode();
      if (G1W != 0) hash ^= G1W.GetHashCode();
      if (G2W != 0) hash ^= G2W.GetHashCode();
      if (G3W != 0) hash ^= G3W.GetHashCode();
      if (G4W != 0) hash ^= G4W.GetHashCode();
      if (G5W != 0) hash ^= G5W.GetHashCode();
      if (G6W != 0) hash ^= G6W.GetHashCode();
      if (G7W != 0) hash ^= G7W.GetHashCode();
      if (HSW != 0) hash ^= HSW.GetHashCode();
      if (GSW != 0) hash ^= GSW.GetHashCode();
      if (HMW != 0) hash ^= HMW.GetHashCode();
      if (GMW != 0) hash ^= GMW.GetHashCode();
      if (HXW != 0) hash ^= HXW.GetHashCode();
      if (GXW != 0) hash ^= GXW.GetHashCode();
      if (HRnk != 0) hash ^= HRnk.GetHashCode();
      if (HRnkPX != 0) hash ^= HRnkPX.GetHashCode();
      if (GRnk != 0) hash ^= GRnk.GetHashCode();
      if (GRnkPX != 0) hash ^= GRnkPX.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (CC != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(CC);
      }
      if (CEB != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(CEB);
      }
      if (HPP1 != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(HPP1);
      }
      if (HPP2 != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(HPP2);
      }
      if (GPP1 != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(GPP1);
      }
      if (GPP2 != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(GPP2);
      }
      if (SoD.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SoD);
      }
      if (Idx != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Idx);
      }
      if (Trh != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Trh);
      }
      if (Drm.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Drm);
      }
      if (Yer.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Yer);
      }
      if (Hakem.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Hakem);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Info);
      }
      if (H1W != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(H1W);
      }
      if (H2W != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(H2W);
      }
      if (H3W != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(H3W);
      }
      if (H4W != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(H4W);
      }
      if (H5W != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(H5W);
      }
      if (H6W != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(H6W);
      }
      if (H7W != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(H7W);
      }
      if (G1W != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(G1W);
      }
      if (G2W != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(G2W);
      }
      if (G3W != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(G3W);
      }
      if (G4W != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(G4W);
      }
      if (G5W != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(G5W);
      }
      if (G6W != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(G6W);
      }
      if (G7W != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(G7W);
      }
      if (HSW != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(HSW);
      }
      if (GSW != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(GSW);
      }
      if (HMW != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(HMW);
      }
      if (GMW != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(GMW);
      }
      if (HXW != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(HXW);
      }
      if (GXW != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(GXW);
      }
      if (HRnk != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(HRnk);
      }
      if (HRnkPX != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(HRnkPX);
      }
      if (GRnk != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(GRnk);
      }
      if (GRnkPX != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(GRnkPX);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (CC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CC);
      }
      if (CEB != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CEB);
      }
      if (HPP1 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HPP1);
      }
      if (HPP2 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HPP2);
      }
      if (GPP1 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GPP1);
      }
      if (GPP2 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GPP2);
      }
      if (SoD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoD);
      }
      if (Idx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      if (Trh != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Trh);
      }
      if (Drm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Drm);
      }
      if (Yer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Yer);
      }
      if (Hakem.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Hakem);
      }
      if (Info.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      if (H1W != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(H1W);
      }
      if (H2W != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(H2W);
      }
      if (H3W != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(H3W);
      }
      if (H4W != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(H4W);
      }
      if (H5W != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(H5W);
      }
      if (H6W != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(H6W);
      }
      if (H7W != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(H7W);
      }
      if (G1W != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(G1W);
      }
      if (G2W != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(G2W);
      }
      if (G3W != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(G3W);
      }
      if (G4W != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(G4W);
      }
      if (G5W != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(G5W);
      }
      if (G6W != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(G6W);
      }
      if (G7W != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(G7W);
      }
      if (HSW != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HSW);
      }
      if (GSW != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GSW);
      }
      if (HMW != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HMW);
      }
      if (GMW != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GMW);
      }
      if (HXW != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HXW);
      }
      if (GXW != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GXW);
      }
      if (HRnk != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HRnk);
      }
      if (HRnkPX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HRnkPX);
      }
      if (GRnk != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GRnk);
      }
      if (GRnkPX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GRnkPX);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MACProxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.CC != 0UL) {
        CC = other.CC;
      }
      if (other.CEB != 0UL) {
        CEB = other.CEB;
      }
      if (other.HPP1 != 0UL) {
        HPP1 = other.HPP1;
      }
      if (other.HPP2 != 0UL) {
        HPP2 = other.HPP2;
      }
      if (other.GPP1 != 0UL) {
        GPP1 = other.GPP1;
      }
      if (other.GPP2 != 0UL) {
        GPP2 = other.GPP2;
      }
      if (other.SoD.Length != 0) {
        SoD = other.SoD;
      }
      if (other.Idx != 0) {
        Idx = other.Idx;
      }
      if (other.Trh != 0L) {
        Trh = other.Trh;
      }
      if (other.Drm.Length != 0) {
        Drm = other.Drm;
      }
      if (other.Yer.Length != 0) {
        Yer = other.Yer;
      }
      if (other.Hakem.Length != 0) {
        Hakem = other.Hakem;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
      if (other.H1W != 0) {
        H1W = other.H1W;
      }
      if (other.H2W != 0) {
        H2W = other.H2W;
      }
      if (other.H3W != 0) {
        H3W = other.H3W;
      }
      if (other.H4W != 0) {
        H4W = other.H4W;
      }
      if (other.H5W != 0) {
        H5W = other.H5W;
      }
      if (other.H6W != 0) {
        H6W = other.H6W;
      }
      if (other.H7W != 0) {
        H7W = other.H7W;
      }
      if (other.G1W != 0) {
        G1W = other.G1W;
      }
      if (other.G2W != 0) {
        G2W = other.G2W;
      }
      if (other.G3W != 0) {
        G3W = other.G3W;
      }
      if (other.G4W != 0) {
        G4W = other.G4W;
      }
      if (other.G5W != 0) {
        G5W = other.G5W;
      }
      if (other.G6W != 0) {
        G6W = other.G6W;
      }
      if (other.G7W != 0) {
        G7W = other.G7W;
      }
      if (other.HSW != 0) {
        HSW = other.HSW;
      }
      if (other.GSW != 0) {
        GSW = other.GSW;
      }
      if (other.HMW != 0) {
        HMW = other.HMW;
      }
      if (other.GMW != 0) {
        GMW = other.GMW;
      }
      if (other.HXW != 0) {
        HXW = other.HXW;
      }
      if (other.GXW != 0) {
        GXW = other.GXW;
      }
      if (other.HRnk != 0) {
        HRnk = other.HRnk;
      }
      if (other.HRnkPX != 0) {
        HRnkPX = other.HRnkPX;
      }
      if (other.GRnk != 0) {
        GRnk = other.GRnk;
      }
      if (other.GRnkPX != 0) {
        GRnkPX = other.GRnkPX;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            CC = input.ReadUInt64();
            break;
          }
          case 48: {
            CEB = input.ReadUInt64();
            break;
          }
          case 56: {
            HPP1 = input.ReadUInt64();
            break;
          }
          case 64: {
            HPP2 = input.ReadUInt64();
            break;
          }
          case 72: {
            GPP1 = input.ReadUInt64();
            break;
          }
          case 80: {
            GPP2 = input.ReadUInt64();
            break;
          }
          case 90: {
            SoD = input.ReadString();
            break;
          }
          case 96: {
            Idx = input.ReadInt32();
            break;
          }
          case 104: {
            Trh = input.ReadInt64();
            break;
          }
          case 114: {
            Drm = input.ReadString();
            break;
          }
          case 122: {
            Yer = input.ReadString();
            break;
          }
          case 130: {
            Hakem = input.ReadString();
            break;
          }
          case 138: {
            Info = input.ReadString();
            break;
          }
          case 144: {
            H1W = input.ReadInt32();
            break;
          }
          case 152: {
            H2W = input.ReadInt32();
            break;
          }
          case 160: {
            H3W = input.ReadInt32();
            break;
          }
          case 168: {
            H4W = input.ReadInt32();
            break;
          }
          case 176: {
            H5W = input.ReadInt32();
            break;
          }
          case 184: {
            H6W = input.ReadInt32();
            break;
          }
          case 192: {
            H7W = input.ReadInt32();
            break;
          }
          case 200: {
            G1W = input.ReadInt32();
            break;
          }
          case 208: {
            G2W = input.ReadInt32();
            break;
          }
          case 216: {
            G3W = input.ReadInt32();
            break;
          }
          case 224: {
            G4W = input.ReadInt32();
            break;
          }
          case 232: {
            G5W = input.ReadInt32();
            break;
          }
          case 240: {
            G6W = input.ReadInt32();
            break;
          }
          case 248: {
            G7W = input.ReadInt32();
            break;
          }
          case 256: {
            HSW = input.ReadInt32();
            break;
          }
          case 264: {
            GSW = input.ReadInt32();
            break;
          }
          case 272: {
            HMW = input.ReadInt32();
            break;
          }
          case 280: {
            GMW = input.ReadInt32();
            break;
          }
          case 288: {
            HXW = input.ReadInt32();
            break;
          }
          case 296: {
            GXW = input.ReadInt32();
            break;
          }
          case 304: {
            HRnk = input.ReadInt32();
            break;
          }
          case 312: {
            HRnkPX = input.ReadInt32();
            break;
          }
          case 320: {
            GRnk = input.ReadInt32();
            break;
          }
          case 328: {
            GRnkPX = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
