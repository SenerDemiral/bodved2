// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/CRUD.proto
// </auto-generated>
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace RestLib {
  /// <summary>
  /// The CRUDs service definition.
  /// </summary>
  public static partial class CRUDs
  {
    static readonly string __ServiceName = "RestLib.CRUDs";

    static readonly grpc::Marshaller<global::RestLib.ActionProxy> __Marshaller_RestLib_ActionProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RestLib.ActionProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RestLib.QryProxy> __Marshaller_RestLib_QryProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RestLib.QryProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RestLib.PPProxy> __Marshaller_RestLib_PPProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RestLib.PPProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RestLib.DDProxy> __Marshaller_RestLib_DDProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RestLib.DDProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RestLib.CCProxy> __Marshaller_RestLib_CCProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RestLib.CCProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RestLib.CTProxy> __Marshaller_RestLib_CTProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RestLib.CTProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RestLib.CTPProxy> __Marshaller_RestLib_CTPProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RestLib.CTPProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RestLib.CETProxy> __Marshaller_RestLib_CETProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RestLib.CETProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RestLib.CFProxy> __Marshaller_RestLib_CFProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RestLib.CFProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RestLib.CEFProxy> __Marshaller_RestLib_CEFProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RestLib.CEFProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RestLib.MACProxy> __Marshaller_RestLib_MACProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RestLib.MACProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RestLib.PPRDProxy> __Marshaller_RestLib_PPRDProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RestLib.PPRDProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RestLib.PPlookUpProxy> __Marshaller_RestLib_PPlookUpProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RestLib.PPlookUpProxy.Parser.ParseFrom);

    static readonly grpc::Method<global::RestLib.ActionProxy, global::RestLib.ActionProxy> __Method_PerformAction = new grpc::Method<global::RestLib.ActionProxy, global::RestLib.ActionProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PerformAction",
        __Marshaller_RestLib_ActionProxy,
        __Marshaller_RestLib_ActionProxy);

    static readonly grpc::Method<global::RestLib.QryProxy, global::RestLib.PPProxy> __Method_PPFill = new grpc::Method<global::RestLib.QryProxy, global::RestLib.PPProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "PPFill",
        __Marshaller_RestLib_QryProxy,
        __Marshaller_RestLib_PPProxy);

    static readonly grpc::Method<global::RestLib.PPProxy, global::RestLib.PPProxy> __Method_PPUpdate = new grpc::Method<global::RestLib.PPProxy, global::RestLib.PPProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PPUpdate",
        __Marshaller_RestLib_PPProxy,
        __Marshaller_RestLib_PPProxy);

    static readonly grpc::Method<global::RestLib.QryProxy, global::RestLib.DDProxy> __Method_DDFill = new grpc::Method<global::RestLib.QryProxy, global::RestLib.DDProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "DDFill",
        __Marshaller_RestLib_QryProxy,
        __Marshaller_RestLib_DDProxy);

    static readonly grpc::Method<global::RestLib.DDProxy, global::RestLib.DDProxy> __Method_DDUpdate = new grpc::Method<global::RestLib.DDProxy, global::RestLib.DDProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DDUpdate",
        __Marshaller_RestLib_DDProxy,
        __Marshaller_RestLib_DDProxy);

    static readonly grpc::Method<global::RestLib.QryProxy, global::RestLib.CCProxy> __Method_CCFill = new grpc::Method<global::RestLib.QryProxy, global::RestLib.CCProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "CCFill",
        __Marshaller_RestLib_QryProxy,
        __Marshaller_RestLib_CCProxy);

    static readonly grpc::Method<global::RestLib.CCProxy, global::RestLib.CCProxy> __Method_CCUpdate = new grpc::Method<global::RestLib.CCProxy, global::RestLib.CCProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CCUpdate",
        __Marshaller_RestLib_CCProxy,
        __Marshaller_RestLib_CCProxy);

    static readonly grpc::Method<global::RestLib.QryProxy, global::RestLib.CTProxy> __Method_CTFill = new grpc::Method<global::RestLib.QryProxy, global::RestLib.CTProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "CTFill",
        __Marshaller_RestLib_QryProxy,
        __Marshaller_RestLib_CTProxy);

    static readonly grpc::Method<global::RestLib.CTProxy, global::RestLib.CTProxy> __Method_CTUpdate = new grpc::Method<global::RestLib.CTProxy, global::RestLib.CTProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CTUpdate",
        __Marshaller_RestLib_CTProxy,
        __Marshaller_RestLib_CTProxy);

    static readonly grpc::Method<global::RestLib.QryProxy, global::RestLib.CTPProxy> __Method_CTPFill = new grpc::Method<global::RestLib.QryProxy, global::RestLib.CTPProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "CTPFill",
        __Marshaller_RestLib_QryProxy,
        __Marshaller_RestLib_CTPProxy);

    static readonly grpc::Method<global::RestLib.CTPProxy, global::RestLib.CTPProxy> __Method_CTPUpdate = new grpc::Method<global::RestLib.CTPProxy, global::RestLib.CTPProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CTPUpdate",
        __Marshaller_RestLib_CTPProxy,
        __Marshaller_RestLib_CTPProxy);

    static readonly grpc::Method<global::RestLib.QryProxy, global::RestLib.CETProxy> __Method_CETFill = new grpc::Method<global::RestLib.QryProxy, global::RestLib.CETProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "CETFill",
        __Marshaller_RestLib_QryProxy,
        __Marshaller_RestLib_CETProxy);

    static readonly grpc::Method<global::RestLib.CETProxy, global::RestLib.CETProxy> __Method_CETUpdate = new grpc::Method<global::RestLib.CETProxy, global::RestLib.CETProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CETUpdate",
        __Marshaller_RestLib_CETProxy,
        __Marshaller_RestLib_CETProxy);

    static readonly grpc::Method<global::RestLib.QryProxy, global::RestLib.CFProxy> __Method_CFFill = new grpc::Method<global::RestLib.QryProxy, global::RestLib.CFProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "CFFill",
        __Marshaller_RestLib_QryProxy,
        __Marshaller_RestLib_CFProxy);

    static readonly grpc::Method<global::RestLib.CFProxy, global::RestLib.CFProxy> __Method_CFUpdate = new grpc::Method<global::RestLib.CFProxy, global::RestLib.CFProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CFUpdate",
        __Marshaller_RestLib_CFProxy,
        __Marshaller_RestLib_CFProxy);

    static readonly grpc::Method<global::RestLib.QryProxy, global::RestLib.CEFProxy> __Method_CEFFill = new grpc::Method<global::RestLib.QryProxy, global::RestLib.CEFProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "CEFFill",
        __Marshaller_RestLib_QryProxy,
        __Marshaller_RestLib_CEFProxy);

    static readonly grpc::Method<global::RestLib.CEFProxy, global::RestLib.CEFProxy> __Method_CEFUpdate = new grpc::Method<global::RestLib.CEFProxy, global::RestLib.CEFProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CEFUpdate",
        __Marshaller_RestLib_CEFProxy,
        __Marshaller_RestLib_CEFProxy);

    static readonly grpc::Method<global::RestLib.QryProxy, global::RestLib.MACProxy> __Method_MACFill = new grpc::Method<global::RestLib.QryProxy, global::RestLib.MACProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "MACFill",
        __Marshaller_RestLib_QryProxy,
        __Marshaller_RestLib_MACProxy);

    static readonly grpc::Method<global::RestLib.MACProxy, global::RestLib.MACProxy> __Method_MACUpdate = new grpc::Method<global::RestLib.MACProxy, global::RestLib.MACProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MACUpdate",
        __Marshaller_RestLib_MACProxy,
        __Marshaller_RestLib_MACProxy);

    static readonly grpc::Method<global::RestLib.QryProxy, global::RestLib.PPRDProxy> __Method_PPRDFill = new grpc::Method<global::RestLib.QryProxy, global::RestLib.PPRDProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "PPRDFill",
        __Marshaller_RestLib_QryProxy,
        __Marshaller_RestLib_PPRDProxy);

    static readonly grpc::Method<global::RestLib.PPRDProxy, global::RestLib.PPRDProxy> __Method_PPRDUpdate = new grpc::Method<global::RestLib.PPRDProxy, global::RestLib.PPRDProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PPRDUpdate",
        __Marshaller_RestLib_PPRDProxy,
        __Marshaller_RestLib_PPRDProxy);

    static readonly grpc::Method<global::RestLib.QryProxy, global::RestLib.PPlookUpProxy> __Method_PPlookUp = new grpc::Method<global::RestLib.QryProxy, global::RestLib.PPlookUpProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "PPlookUp",
        __Marshaller_RestLib_QryProxy,
        __Marshaller_RestLib_PPlookUpProxy);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::RestLib.CRUDReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CRUDs</summary>
    public abstract partial class CRUDsBase
    {
      public virtual global::System.Threading.Tasks.Task<global::RestLib.ActionProxy> PerformAction(global::RestLib.ActionProxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task PPFill(global::RestLib.QryProxy request, grpc::IServerStreamWriter<global::RestLib.PPProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RestLib.PPProxy> PPUpdate(global::RestLib.PPProxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task DDFill(global::RestLib.QryProxy request, grpc::IServerStreamWriter<global::RestLib.DDProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RestLib.DDProxy> DDUpdate(global::RestLib.DDProxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task CCFill(global::RestLib.QryProxy request, grpc::IServerStreamWriter<global::RestLib.CCProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RestLib.CCProxy> CCUpdate(global::RestLib.CCProxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task CTFill(global::RestLib.QryProxy request, grpc::IServerStreamWriter<global::RestLib.CTProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RestLib.CTProxy> CTUpdate(global::RestLib.CTProxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task CTPFill(global::RestLib.QryProxy request, grpc::IServerStreamWriter<global::RestLib.CTPProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RestLib.CTPProxy> CTPUpdate(global::RestLib.CTPProxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task CETFill(global::RestLib.QryProxy request, grpc::IServerStreamWriter<global::RestLib.CETProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RestLib.CETProxy> CETUpdate(global::RestLib.CETProxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task CFFill(global::RestLib.QryProxy request, grpc::IServerStreamWriter<global::RestLib.CFProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RestLib.CFProxy> CFUpdate(global::RestLib.CFProxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task CEFFill(global::RestLib.QryProxy request, grpc::IServerStreamWriter<global::RestLib.CEFProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RestLib.CEFProxy> CEFUpdate(global::RestLib.CEFProxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task MACFill(global::RestLib.QryProxy request, grpc::IServerStreamWriter<global::RestLib.MACProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RestLib.MACProxy> MACUpdate(global::RestLib.MACProxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task PPRDFill(global::RestLib.QryProxy request, grpc::IServerStreamWriter<global::RestLib.PPRDProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RestLib.PPRDProxy> PPRDUpdate(global::RestLib.PPRDProxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task PPlookUp(global::RestLib.QryProxy request, grpc::IServerStreamWriter<global::RestLib.PPlookUpProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CRUDs</summary>
    public partial class CRUDsClient : grpc::ClientBase<CRUDsClient>
    {
      /// <summary>Creates a new client for CRUDs</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CRUDsClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CRUDs that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CRUDsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CRUDsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CRUDsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::RestLib.ActionProxy PerformAction(global::RestLib.ActionProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PerformAction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RestLib.ActionProxy PerformAction(global::RestLib.ActionProxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PerformAction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.ActionProxy> PerformActionAsync(global::RestLib.ActionProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PerformActionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.ActionProxy> PerformActionAsync(global::RestLib.ActionProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PerformAction, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.PPProxy> PPFill(global::RestLib.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PPFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.PPProxy> PPFill(global::RestLib.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_PPFill, null, options, request);
      }
      public virtual global::RestLib.PPProxy PPUpdate(global::RestLib.PPProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PPUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RestLib.PPProxy PPUpdate(global::RestLib.PPProxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PPUpdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.PPProxy> PPUpdateAsync(global::RestLib.PPProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PPUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.PPProxy> PPUpdateAsync(global::RestLib.PPProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PPUpdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.DDProxy> DDFill(global::RestLib.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DDFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.DDProxy> DDFill(global::RestLib.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_DDFill, null, options, request);
      }
      public virtual global::RestLib.DDProxy DDUpdate(global::RestLib.DDProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DDUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RestLib.DDProxy DDUpdate(global::RestLib.DDProxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DDUpdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.DDProxy> DDUpdateAsync(global::RestLib.DDProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DDUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.DDProxy> DDUpdateAsync(global::RestLib.DDProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DDUpdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.CCProxy> CCFill(global::RestLib.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CCFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.CCProxy> CCFill(global::RestLib.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_CCFill, null, options, request);
      }
      public virtual global::RestLib.CCProxy CCUpdate(global::RestLib.CCProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CCUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RestLib.CCProxy CCUpdate(global::RestLib.CCProxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CCUpdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.CCProxy> CCUpdateAsync(global::RestLib.CCProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CCUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.CCProxy> CCUpdateAsync(global::RestLib.CCProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CCUpdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.CTProxy> CTFill(global::RestLib.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CTFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.CTProxy> CTFill(global::RestLib.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_CTFill, null, options, request);
      }
      public virtual global::RestLib.CTProxy CTUpdate(global::RestLib.CTProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CTUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RestLib.CTProxy CTUpdate(global::RestLib.CTProxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CTUpdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.CTProxy> CTUpdateAsync(global::RestLib.CTProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CTUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.CTProxy> CTUpdateAsync(global::RestLib.CTProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CTUpdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.CTPProxy> CTPFill(global::RestLib.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CTPFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.CTPProxy> CTPFill(global::RestLib.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_CTPFill, null, options, request);
      }
      public virtual global::RestLib.CTPProxy CTPUpdate(global::RestLib.CTPProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CTPUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RestLib.CTPProxy CTPUpdate(global::RestLib.CTPProxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CTPUpdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.CTPProxy> CTPUpdateAsync(global::RestLib.CTPProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CTPUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.CTPProxy> CTPUpdateAsync(global::RestLib.CTPProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CTPUpdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.CETProxy> CETFill(global::RestLib.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CETFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.CETProxy> CETFill(global::RestLib.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_CETFill, null, options, request);
      }
      public virtual global::RestLib.CETProxy CETUpdate(global::RestLib.CETProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CETUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RestLib.CETProxy CETUpdate(global::RestLib.CETProxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CETUpdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.CETProxy> CETUpdateAsync(global::RestLib.CETProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CETUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.CETProxy> CETUpdateAsync(global::RestLib.CETProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CETUpdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.CFProxy> CFFill(global::RestLib.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CFFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.CFProxy> CFFill(global::RestLib.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_CFFill, null, options, request);
      }
      public virtual global::RestLib.CFProxy CFUpdate(global::RestLib.CFProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CFUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RestLib.CFProxy CFUpdate(global::RestLib.CFProxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CFUpdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.CFProxy> CFUpdateAsync(global::RestLib.CFProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CFUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.CFProxy> CFUpdateAsync(global::RestLib.CFProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CFUpdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.CEFProxy> CEFFill(global::RestLib.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CEFFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.CEFProxy> CEFFill(global::RestLib.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_CEFFill, null, options, request);
      }
      public virtual global::RestLib.CEFProxy CEFUpdate(global::RestLib.CEFProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CEFUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RestLib.CEFProxy CEFUpdate(global::RestLib.CEFProxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CEFUpdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.CEFProxy> CEFUpdateAsync(global::RestLib.CEFProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CEFUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.CEFProxy> CEFUpdateAsync(global::RestLib.CEFProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CEFUpdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.MACProxy> MACFill(global::RestLib.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MACFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.MACProxy> MACFill(global::RestLib.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_MACFill, null, options, request);
      }
      public virtual global::RestLib.MACProxy MACUpdate(global::RestLib.MACProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MACUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RestLib.MACProxy MACUpdate(global::RestLib.MACProxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MACUpdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.MACProxy> MACUpdateAsync(global::RestLib.MACProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MACUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.MACProxy> MACUpdateAsync(global::RestLib.MACProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MACUpdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.PPRDProxy> PPRDFill(global::RestLib.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PPRDFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.PPRDProxy> PPRDFill(global::RestLib.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_PPRDFill, null, options, request);
      }
      public virtual global::RestLib.PPRDProxy PPRDUpdate(global::RestLib.PPRDProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PPRDUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RestLib.PPRDProxy PPRDUpdate(global::RestLib.PPRDProxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PPRDUpdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.PPRDProxy> PPRDUpdateAsync(global::RestLib.PPRDProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PPRDUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RestLib.PPRDProxy> PPRDUpdateAsync(global::RestLib.PPRDProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PPRDUpdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.PPlookUpProxy> PPlookUp(global::RestLib.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PPlookUp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::RestLib.PPlookUpProxy> PPlookUp(global::RestLib.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_PPlookUp, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CRUDsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CRUDsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CRUDsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_PerformAction, serviceImpl.PerformAction)
          .AddMethod(__Method_PPFill, serviceImpl.PPFill)
          .AddMethod(__Method_PPUpdate, serviceImpl.PPUpdate)
          .AddMethod(__Method_DDFill, serviceImpl.DDFill)
          .AddMethod(__Method_DDUpdate, serviceImpl.DDUpdate)
          .AddMethod(__Method_CCFill, serviceImpl.CCFill)
          .AddMethod(__Method_CCUpdate, serviceImpl.CCUpdate)
          .AddMethod(__Method_CTFill, serviceImpl.CTFill)
          .AddMethod(__Method_CTUpdate, serviceImpl.CTUpdate)
          .AddMethod(__Method_CTPFill, serviceImpl.CTPFill)
          .AddMethod(__Method_CTPUpdate, serviceImpl.CTPUpdate)
          .AddMethod(__Method_CETFill, serviceImpl.CETFill)
          .AddMethod(__Method_CETUpdate, serviceImpl.CETUpdate)
          .AddMethod(__Method_CFFill, serviceImpl.CFFill)
          .AddMethod(__Method_CFUpdate, serviceImpl.CFUpdate)
          .AddMethod(__Method_CEFFill, serviceImpl.CEFFill)
          .AddMethod(__Method_CEFUpdate, serviceImpl.CEFUpdate)
          .AddMethod(__Method_MACFill, serviceImpl.MACFill)
          .AddMethod(__Method_MACUpdate, serviceImpl.MACUpdate)
          .AddMethod(__Method_PPRDFill, serviceImpl.PPRDFill)
          .AddMethod(__Method_PPRDUpdate, serviceImpl.PPRDUpdate)
          .AddMethod(__Method_PPlookUp, serviceImpl.PPlookUp).Build();
    }

  }
}
#endregion
